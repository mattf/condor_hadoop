#!/usr/bin/ruby

require 'optparse'
require_relative 'numeric_duration'
require_relative 'numeric_state_name'


def list(options)
  filter = options[:id].nil? ? '' : %{&& JobTracker =?= #{options[:id]}}
  IO.popen(%{condor_q -constraint 'HadoopType =?= "TaskTracker" #{filter}' \
                      -format "%d," ClusterId \
                      -format "%s," QDate \
                      -format "%d," JobStatus \
                      -format "%s," EnteredCurrentStatus \
                      -format "%s," Owner \
                      -format "%d," JobTracker \
                      -format "%s," JobTrackerHTTPAddress \
                      -format "%s" JobTrackerIPCAddress \
                      -format "\n" TRUE}) do |sub|
    printf "  ID    Submitted   Status       Uptime      Owner  JobTracker\n"
    sub.each do |line|
      id, qdate, status, time, owner, jobtracker_id, http, ipc = line.chomp.split(",")
      printf "%4d %12s %8s %12s %10.9s  ",
             id,
             Time.at(qdate.to_i).strftime("%d/%m %H:%M"),
             status.to_i.state_name,
             status.to_i == 2 ? (Time.now()-time.to_i).to_i.duration : "N/A",
             owner
      if http.empty?
        printf "%s\n", ipc
      else
        printf "%d @ %s\n", jobtracker_id, http
      end
    end
  end
end


def start(options)
  jobtracker_id = options[:id]
  hadoop_file = ( options[:file] == nil ? ENV['HADOOP_BIN_TARBALL']: options[:file] )

  if hadoop_file.nil?
    puts "hadoop-X.Y.X-bin.tar.gz required! Please specify via --file= ,or set the HADOOP_BIN_TARBALL environment variable"
    exit 1
  end

  ipc = http = nil

  if jobtracker_id != 0 

    tries = 0
    until not ipc.nil? or tries >= 3
      # XXX: Race - IPC & HTTP are not set atomically
      IO.popen(%{condor_q -constraint 'ClusterId == #{jobtracker_id}' \
                          -format "%s" JobTrackerIPCAddress \
                          -format "," TRUE \
                          -format "%s" JobTrackerHTTPAddress \
                          -format "\n" TRUE }) do |sub|
        tries+=1
        sub.each do |line|
          line.chomp!
          if line != ","
            ipc, http = line.split(",")
          end
        end
        sleep 3
      end
    end
  else
    ipc = options[:idraw]
  end
 
  if ipc.nil?
    puts "Could not find IPC address for #{jobtracker_id}, make sure it is running."
    exit
  end

  puts "Found JobTracker at #{ipc}"

  (1..options.fetch(:count, 1)).each do 
    IO.popen(%{condor_submit -a HadoopBinTarBall='#{hadoop_file}' -a "+JobTracker=#{jobtracker_id}" -a '+JobTrackerHTTPAddress="#{http}"' -a '+JobTrackerIPCAddress="#{ipc}"' -a JobTrackerAddress=#{ipc} mapred_tasktracker.job}) do |sub|
      sub.each do |line|
        puts line
      end
    end
  end
end


def stop(options)
  IO.popen(%{condor_rm -constraint 'ClusterId == #{options[:id]}'}) do |sub|
    sub.each do |line|
      puts line
    end
  end
end


options = {}

optparse = OptionParser.new do |opts|
  opts.banner = "usage: #{$0} [options]"
  opts.on("-l", "--list[=JobTracker ID]", Numeric, "List TaskTrackers, optionally of a JobTracker") do |v|
    options[:action] = :list
    options[:id] = v.to_i if not v.nil?
  end
  opts.on("-f", "--file=hadoop-bin.tar.gz", "Specify a specific hadoop tarball") do |f|
    options[:file] = f 
  end
  opts.on("-s", "--start=ID", "Start a new TaskTracker, attached to given JobTracker (maprfs:// or ID)") do |v|
    options[:action] = :start
    options[:id] = v.to_i
    options[:idraw] = v
  end
  opts.on("-c", "--count=COUNT", "Start multiple new DataNodes") do |v|
    options[:count] = v.to_i
  end
  opts.on("-e", "--stop=ID", Numeric, "Stop a TaskTracker") do |v|
    options[:action] = :stop
    options[:id] = v.to_i
  end
  opts.on("-h", "--help", "Show this message") do
    puts opts
    exit
  end
end

begin
  optparse.parse!
  if options[:action].nil?
    puts optparse
    exit
  end
rescue OptionParser::InvalidOption,
       OptionParser::InvalidArgument,
       OptionParser::MissingArgument
  puts $!.to_s
  puts optparse
  exit
end

# XXX: Arg validation (including warn if ignoring --count)
send options[:action], options
