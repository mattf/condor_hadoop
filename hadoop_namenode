#!/usr/bin/ruby

require 'optparse'


def list(options)
  IO.popen(%{
     condor_q -constraint 'HadoopType =?= "NameNode"' \
              -format "%4d" ClusterId \
              -format " %12s" 'formatTime(QDate, "%d/%m %H:%M")' \
              -format " %8s" 'ifThenElse(JobStatus == 1, "Pending", 
                                        ifThenElse(JobStatus == 2, "Running",
                                          ifThenElse(JobStatus == 3 || JobStatus == 4,
                                                     "Exiting",
                                                     "Error")))' \
              -format " %12s" 'ifThenElse(JobStatus == 2,
                                                  interval(time() - EnteredCurrentStatus),
                                                  "N/A")' \
              -format " %10.9s" Owner \
              -format "  %s" 'ifThenElse(NameNodeHTTPAddress =?= UNDEFINED || JobStatus =!= 2,
                                                "N/A",
                                                NameNodeHTTPAddress)' \
              -format "\n" TRUE}) do |sub|
    printf "  ID    Submitted   Status       Uptime      Owner  Location\n"
    sub.each do |line|
      puts line
    end
  end
end


def ipc(options)
  ipc = nil
  tries = 0
  until not ipc.nil? or tries >= 3
    IO.popen(%{condor_q -constraint 'ClusterId == #{options[:id]}' \
                        -format "%s" NameNodeIPCAddress \
                        -format "\n" TRUE }) do |sub|
      tries+=1
      sub.each do |line|
        if not line.chomp.empty?
          ipc = line.chomp
        end
      end
      sleep 3
    end
  end

  if ipc.nil?
    puts "Could not find IPC address for #{options[:id]}, make sure it is running."
    exit 1
  end

  puts "#{ipc}"
  exit 0
end


def start(options)
  hadoop_file = ( options[:file] == nil ? ENV['HADOOP_BIN_TARBALL']: options[:file] )

  if hadoop_file.nil?
    puts "hadoop-X.Y.X-bin.tar.gz required! Please specify via --file= ,or set the HADOOP_BIN_TARBALL environment variable"
    exit 1
  end

  IO.popen(%{condor_submit -a HadoopBinTarBall='#{hadoop_file}' hdfs_namenode.job}) do |sub|
    sub.each do |line|
      puts line
    end
  end
end


def stop(options)
  target = options[:id]
  IO.popen(%{condor_rm -constraint 'NameNode =?= #{target} || ClusterId == #{target}'}) do |sub|
    sub.each do |line|
      puts line
    end
  end
end


options = {}

optparse = OptionParser.new do |opts|
  opts.banner = "usage: #{$0} [options]"
  opts.on("-l", "--list", "List NameNodes") do
    options[:action] = :list
  end
  opts.on("-i", "--ipc=ID", Numeric, "Get NameNode IPC address") do |v|
    options[:action] = :ipc
    options[:id] = v.to_i
  end
  opts.on("-f", "--file=hadoop-bin.tar.gz", "Specify tarball or set HADOOP_BIN_TARBALL in your env") do |f|
    options[:file] = f 
  end
  opts.on("-s", "--start", "Start a new NameNode") do
    options[:action] = :start
  end
  opts.on("-e", "--stop=ID", Numeric, "Stop a NameNode") do |v|
    options[:action] = :stop
    options[:id] = v.to_i
  end
  opts.on("-h", "--help", "Show this message") do
    puts opts
    exit
  end
end

begin
  optparse.parse!
  if options[:action].nil?
    puts optparse
    exit
  end
rescue OptionParser::InvalidOption,
       OptionParser::InvalidArgument,
       OptionParser::MissingArgument
  puts $!.to_s
  puts optparse
  exit
end

send options[:action], options
